// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using quiz_app_api.src.Core.Database;

#nullable disable

namespace quiz_app_api.src.Core.Database.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("quiz_app_api.src.Core.Database.Model.UserModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("refresh_token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("quiz_app_api.src.Core.Database.Models.AnswerModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("answer")
                        .HasColumnType("int");

                    b.Property<bool>("is_true")
                        .HasColumnType("bit");

                    b.Property<int>("question_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("question_id");

                    b.ToTable("answer");
                });

            modelBuilder.Entity("quiz_app_api.src.Core.Database.Models.QuestionModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("category_id")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("questions");
                });

            modelBuilder.Entity("quiz_app_api.src.Core.Database.Models.UserQuestionModel", b =>
                {
                    b.Property<int>("question_id")
                        .HasColumnType("int");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.Property<int>("take")
                        .HasColumnType("int");

                    b.Property<int?>("answer")
                        .HasColumnType("int");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<double>("time_to_answer")
                        .HasColumnType("float");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("question_id", "user_id", "take");

                    b.HasIndex("user_id");

                    b.ToTable("users_questions");
                });

            modelBuilder.Entity("quiz_app_api.src.Core.Database.Models.AnswerModel", b =>
                {
                    b.HasOne("quiz_app_api.src.Core.Database.Models.QuestionModel", "question")
                        .WithMany("answers")
                        .HasForeignKey("question_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("question");
                });

            modelBuilder.Entity("quiz_app_api.src.Core.Database.Models.UserQuestionModel", b =>
                {
                    b.HasOne("quiz_app_api.src.Core.Database.Models.QuestionModel", "question")
                        .WithMany("users_questions")
                        .HasForeignKey("question_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("quiz_app_api.src.Core.Database.Model.UserModel", "user")
                        .WithMany("users_questions")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("question");

                    b.Navigation("user");
                });

            modelBuilder.Entity("quiz_app_api.src.Core.Database.Model.UserModel", b =>
                {
                    b.Navigation("users_questions");
                });

            modelBuilder.Entity("quiz_app_api.src.Core.Database.Models.QuestionModel", b =>
                {
                    b.Navigation("answers");

                    b.Navigation("users_questions");
                });
#pragma warning restore 612, 618
        }
    }
}
